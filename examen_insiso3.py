# -*- coding: utf-8 -*-
"""Examen_insiso3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XrgCseVJLcASzpqm2wrKgqkN5uoXfDG5

3.      Para el preprocesamiento debe usted migrar su dataset de csv u otro formato a arff, una vez realizado ello. Realice un etiqueta onehotencoder, labelencoder, discretización y normalización.
"""

import pandas as pd

from google.colab import drive
drive.mount("/content/Drive")

df = pd.read_csv("/content/Drive/MyDrive/datos/Insiso2.csv")

# Configurar opciones de visualización
pd.set_option('display.max_columns', None)  # Muestra todas las columnas
pd.set_option('display.max_rows', None)     # Muestra todas las filas
pd.set_option('display.max_colwidth', 20)   # Ajusta el ancho de las columnas a 20 caracteres (opcional)

# Convertir la columna de fechas a formato datetime si no lo está ya
df['Marca de tiempo'] = pd.to_datetime(df['Marca de tiempo'], errors='coerce')
# Convertir las fechas a días desde el 1 de enero de 2022 (Epoch time)
df['dias_desde_2022'] = (df['Marca de tiempo'] - pd.Timestamp("2022-01-01")).dt.days

# Reemplazar la columna Marca de tiempo con la columna dias_desde_2022
df.drop('Marca de tiempo', axis=1, inplace=True)
df.rename(columns={'dias_desde_2022': 'Marca de tiempo'}, inplace=True)
# Función para convertir los rangos de edad a puntos medios
def rango_a_punto_medio(rango):
    try:
        limites = rango.split('-')  # Dividir el rango en límites inferior y superior
        if len(limites) == 2:  # Verificar que se obtuvieron dos límites
            limite_inferior = int(limites[0])  # Convertir el límite inferior a entero
            limite_superior = int(limites[1])  # Convertir el límite superior a entero
            return (limite_inferior + limite_superior) / 2  # Calcular el punto medio
    except (ValueError, AttributeError):  # Manejar errores si la conversión falla
        return rango  # Retornar el valor original en caso de error
    return None  # Retornar None si no se pudo calcular el punto medio
df['Edad'] = df['Edad'].apply(rango_a_punto_medio)
# Función para convertir valores a numéricos cuando sea posible
def convertir_a_numerico(x):
    try:
        return pd.to_numeric(x)  # Intentar convertir el valor a numérico
    except ValueError:
        return x  # Retornar el valor original si la conversión falla

# Aplicar la conversión a todo el DataFrame
df = df.apply(convertir_a_numerico)
# Mostrar el DataFrame completo en formato tabular, sin índices
print(df.to_string(index=False))

import pandas as pd

# Select all categorical columns (object dtype)
categorical_cols = df.select_dtypes(include=['object']).columns

# One-hot encoding on all categorical columns
df_onehot = pd.get_dummies(df, columns=categorical_cols)
print(df_onehot)

# Importamos la clase LabelEncoder de la biblioteca scikit-learn para realizar la codificación de etiquetas
from sklearn.preprocessing import LabelEncoder

# Label encoding
le = LabelEncoder()
df['etiqueta_encoded'] = le.fit_transform(df['Sentirse ansioso'])
print(df)

from sklearn.preprocessing import KBinsDiscretizer

# Discretization
kbd = KBinsDiscretizer(n_bins=5, encode='ordinal')
df['valor_discretizado'] = kbd.fit_transform(df[['Edad']])
print(df)

from sklearn.preprocessing import MinMaxScaler

# Normalization
mms = MinMaxScaler()
df['valor_normalizado'] = mms.fit_transform(df[['Edad']])
print(df)





